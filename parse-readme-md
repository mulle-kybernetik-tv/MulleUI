#! /usr/bin/env bash

[ "${TRACE}" = 'YES' -o "${MULLE_PROJECT_PACKAGE_JSON_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.0.0"


print_flags()
{
   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   parse-readme-md [flags] <key> <filename>

   Parse various aspects of standardized mulle projects README.md

Keys:
   emoji
   text
   name

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   exit 1
}


read_project_environment()
{
   log_entry "read_project_environment" "$@"

   if [ -f ".mulle/etc/env/environment-project.sh" ]
   then
      log_fluff "Reading project settings"
      . ".mulle/etc/env/environment-project.sh"
   fi

   if [ -z "${PROJECT_TYPE}" ]
   then
      if [ -f ".mulle/share/env/environment-project.sh" ]
      then
         log_fluff "Reading v2 project settings"
         . ".mulle/share/env/environment-project.sh"
      fi
   fi

   [ -z "${PROJECT_TYPE}" ] && \
     fail "Could not find required PROJECT_TYPE in environment."
}



r_sanitized_line()
{
   RVAL="$*"

   # remove hyperlinks
   RVAL="`sed -e 's/\[\([^]]*\)\]([^)]*)/\1/g' <<< "${RVAL}" `"

   # remove bold and italic

   RVAL="${RVAL//\*/}"
}



main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'
   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   local OPTION_OUTPUT_FILE="-"
   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;


         ##
         ## ADD YOUR FLAGS HERE
         ##

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"


   directory="`rexekutor mulle-sde project-dir`"
   if [ -z "${directory}" ]
   then
      fail "No mulle-sde project found"
   fi
   rexekutor cd "${directory}" || exit 1

   #
   # get local project environment
   #
   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`PATH=/bin:/usr/bin pwd -P`"
      MULLE_SHELL_MODE="" . ".mulle/share/env/environment.sh" || exit 1
   fi

   [ $# -eq 2 ] || usage

   local key="$1"
   local filename="$2"
   local sep

   case "${key}" in
      "")
         usage "Missing key"
      ;;

      name)
         egrep '^#' "${filename}" | head -1 | sed  -n 's/^\#*\ *\([^ ]*\).*/\1/p'
      ;;

      emoji)
         egrep '^####' "${filename}" | head -1 | sed  -n 's/^\#*\ *\([^ ]*\).*/\1/p'
      ;;

      # parse this
      #  # main-whatever
      #  #### headline
      #  next 8 lines
      text)
         count=0
         text=""

         IFS=$'\n'
         set -f
         while read line
         do
            line="${line## }"
            line="${line%% }" # remove space

            case "${line}" in
               \#*|\>*)
               ;;

               \|*)
                  break
               ;;

               "")
                  if [ ! -z "${text}" ]
                  then
                     if [ "${sep}" = $'\n' ]
                     then
                        sep=$'\n'$'\n'
                     else
                        sep=$'\n'
                     fi
                  fi
               ;;

               *)
                  r_sanitized_line "${line}"
                  r_concat "${text}" "${RVAL}" "${sep}"
                  text="${RVAL}"
                  count=$(( count + 1 ))
                  if [ ${count} -eq 8 ]
                  then
                     break
                  fi
                  sep=' '
               ;;
            esac
         done < "${filename}"

         echo "${text}"
      ;;

      *)
         usage "Unknown key ${key}"
      ;;
   esac
}



########
###
### INIT - You usually won't edit code below
###

trap_fail()
{
   exit 1
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   #
   # leading backslash ? looks like we're getting called from
   # mingw via a .BAT or so
   #
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   call_main "${MULLE_PROJECT_PACKAGE_JSON_FLAGS}" "$@"
}


_init "$@" # will call main indirectly via call_main


### INIT
###
########
